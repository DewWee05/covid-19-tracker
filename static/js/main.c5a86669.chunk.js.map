{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","plugins","legend","display","tooltip","mode","intersect","elements","point","maintainAspectRatio","tooltips","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borderColor","App","setCountries","setInputCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","getCountriesData","name","iso2","sortedData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5a86669.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} \r\n        className={`infoBox ${active && \"infoBox--selected\"} \r\n        ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                {/* Title */}\r\n                <Typography color=\"textSecondary\">{title}</Typography>\r\n                \r\n                {/* Number of cases */}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                \r\n                {/* Total */}\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">{total} Total</Typography>\r\n\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import {Circle, Popup} from \"react-leaflet\";\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 900,\r\n  },\r\n};\r\n\r\n\r\nexport const sortData = (data) => {\r\n    let sortedData = [...data];\r\n\r\n    // sort the data based on the number of cases\r\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) => \r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n// draw circles on the map with interactive tooltop.\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    plugins: {\r\n        legend: {\r\n            display: false,\r\n        },\r\n\r\n        tooltip: {\r\n            mode: 'nearest',\r\n            intersect: false\r\n        }\r\n    },\r\n\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  \r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType=\"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n            //buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import './App.css';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from './LineGraph';\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\n\n\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n\n  // set 'worldwide' as a default value of the item.\n  const [country, setInputCountry] = useState('worldwide');\n\n  const [countryInfo, setCountryInfo] = useState({});\n\n  const [tableData, setTableData] = useState([]);\n\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n\n  const [mapZoom, setMapZoom] = useState(3);\n\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  // https://disease.sh/v3/covid-19/countries\n  // useEffect = run a piece of code based on a given condition.\n\n  // The code inside here will run once when the component loads and not again after.\n  // Runs an async code -> send a request, wait for it, then do something with that info.\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,  // Full name, united states\n            value: country.countryInfo.iso2,// USA\n          }));\n\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === 'worldwide' ?\n        \"https://disease.sh/v3/covid-19/all\" :\n        `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n\n        // All of the data from the country response\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}> {country.name}</MenuItem>\n              ))}\n\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType ===\"cases\"}\n            onClick={e => setCasesType(\"cases\")}\n            title=\"Coronavirus cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={countryInfo.cases} />\n          <InfoBox\n            active={casesType ===\"recovered\"}\n            onClick={e => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox\n            isRed\n            active={casesType ===\"deaths\"}\n            onClick={e => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom} />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\"> Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\"casesType={casesType} />\n        </CardContent>\n        {/* Table */}\n        {/* Graph */}\n      </Card>\n    </div>\n\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}